

    import torch
    import torchvision
    import torch.nn as nn
    import torch.nn.functional as F

    from torch.utils.data import DataLoader
    from torchvision.transforms import transforms

    #Load the test data
    img_size = 64
    batch_size = 64

    transformer = transforms.Compose([
        transforms.ToTensor(),
        transforms.RandomRotation(30), 
        transforms.RandomResizedCrop(224),
        transforms.RandomHorizontalFlip(),
        transforms.Normalize([0.5, 0.5, 0.5], [0.5, 0.5, 0.5]),
        transforms.Resize((img_size, img_size))
    ])

    test_data = torchvision.datasets.ImageFolder('testdata', transform=transformer)


    #Load in data
    test_loader = DataLoader(
        test_data, 
        batch_size=batch_size, shuffle=True
    )

    class Tuned_CNN(nn.Module):
        def __init__(self):
            super(Tuned_CNN, self).__init__()

            self.conv1 = nn.Conv2d(3, 6, 5)
            self.conv2 = nn.Conv2d(6, 16, 5)
            self.conv3 = nn.Conv2d(6, 6, 5)

            self.bn1 = nn.BatchNorm2d(6, affine=False)
            self.bn2 = nn.BatchNorm2d(6, affine=False)

            self.maxpool = nn.MaxPool2d(kernel_size=3, stride=2)
            self.dropout = nn.Dropout(p=0.5, inplace=False)

            self.relu = nn.ReLU(inplace=True)
        
            self.fc1 = nn.Linear(144, 120)
            self.fc2 = nn.Linear(120, 84)
            self.fc3 = nn.Linear(84, 3)

        def forward(self, x):

            x = self.maxpool(F.relu(self.conv1(x)))
            x = self.bn1(x)
            x = self.maxpool(F.relu(self.conv3(x)))
            x = self.bn2(x)
            x = self.maxpool(F.relu(self.conv2(x)))
            x = self.dropout(x)
            
            x = torch.flatten(x, 1) 
            x = F.relu(self.fc1(x))
            x = F.relu(self.fc2(x))
            x = self.fc3(x)
            return x

    #Load in the model

    cnn = Tuned_CNN()
    cnn.load_state_dict(torch.load('model.pth'))
    cnn.eval()

    Tuned_CNN(
      (conv1): Conv2d(3, 6, kernel_size=(5, 5), stride=(1, 1))
      (conv2): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))
      (conv3): Conv2d(6, 6, kernel_size=(5, 5), stride=(1, 1))
      (bn1): BatchNorm2d(6, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
      (bn2): BatchNorm2d(6, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)
      (dropout): Dropout(p=0.5, inplace=False)
      (relu): ReLU(inplace=True)
      (fc1): Linear(in_features=144, out_features=120, bias=True)
      (fc2): Linear(in_features=120, out_features=84, bias=True)
      (fc3): Linear(in_features=84, out_features=3, bias=True)
    )

    correct = 0
    total = 0
    # since we're not training, we don't need to calculate the gradients for our outputs
    with torch.no_grad():
        for data in test_loader:
            images, labels = data
            # calculate outputs by running images through the network
            outputs = cnn(images)
            # the class with the highest energy is what we choose as prediction
            _, predicted = torch.max(outputs.data, 1)
            total += labels.size(0)
            correct += (predicted == labels).sum().item()

    print('Accuracy of the network on the test images: %d %%' % (
        100 * correct / total))

    Accuracy of the network on the test images: 72 %
